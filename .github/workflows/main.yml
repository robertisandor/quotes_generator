name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TF_CLOUD_ORGANIZATION: "rob_sandor"
  TF_API_TOKEN: "${{  secrets.TF_API_TOKEN }}"
  TF_WORKSPACE:  "terraform-github-actions"
  CONFIG_DIRECTORYY:  "./terraform"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: "./terraform"
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: apply-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: "./terraform"

      # - name: Create Apply Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: apply-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      # - name: Apply
      #   uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
      #   id: apply
      #   with:
      #     run: ${{ steps.apply-run.outputs.run_id }}
      #     comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: true
      #     tags: risandor/quotes_generator:0.1.0

      # - name: Deploy to server via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SERVER_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     port: 22
      #     script: |
      #       CI=true echo DATABASE_URL=${{ secrets.DATABASE_URL }} > .env
      #       CI=true echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
      #       CI=true echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
      #       CI=true docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      #       CI=true docker stop quotes-generator
      #       CI=true docker image prune -a
      #       CI=true docker pull risandor/quotes_generator:0.1.0
      #       CI=true docker rm quotes-generator
      #       CI=true docker run --name=quotes-generator --env-file .env -d -p 80:8000 risandor/quotes_generator:0.1.0
            
