name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  TF_CLOUD_ORGANIZATION: "rob_sandor"
  TF_API_TOKEN: "${{  secrets.TF_API_TOKEN }}"
  TF_WORKSPACE:  "terraform-github-actions"
  CONFIG_DIRECTORY:  "./terraform"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      SERVER_HOST: ${{ steps.terraform-apply.outputs.SERVER_HOST }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::487577641151:role/github-actions-role
          aws-region: us-west-2

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: >-
          terraform init -migrate-state;
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: >-
          terraform plan;
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: terraform-apply
        run: >-
          terraform apply -auto-approve;
          echo SERVER_HOST=$(terraform state pull | jq -r '.resources[] | select(.type=="aws_instance" and .name=="web") | .instances[] | select(.attributes.key_name=="apiuser") | .attributes.public_ip') >> $GITHUB_ENV;
          echo DATABASE_URL=$(terraform state pull | jq -r '.resources[] | select(.type=="aws_db_instance" and .name=="quotes_generator") | .instances[] | select(.attributes.id=="quotes-generator") | .attributes.address') >> $GITHUB_ENV;
          echo DATABASE_USERNAME=$(terraform state pull | jq -r '.resources[] | select(.type=="aws_db_instance" and .name=="quotes_generator") | .instances[] | select(.attributes.id=="quotes-generator") | .attributes.username') >> $GITHUB_ENV;
          echo DATABASE_PASSWORD=$(terraform state pull | jq -r '.resources[] | select(.type=="aws_db_instance" and .name=="quotes_generator") | .instances[] | select(.attributes.id=="quotes-generator") | .attributes.password') >> $GITHUB_ENV;
          
        working-directory: ${{ env.CONFIG_DIRECTORY }} 
  
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          npm install --global sodium-native@4.0.4
          echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV
          
      - name: Update GitHub Actions Secrets
        uses: actions/github-script@v6
        id: update-github-secrets
        with:
          result-encoding: string
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const sodium = require('sodium-native');
            const { data: {key: publicKey, key_id: keyId} } = await github.rest.actions.getRepoPublicKey({...context.repo});
            if (publicKey) {
              const key = Buffer.from(publicKey, 'base64');
              const db_username_message = Buffer.from(process.env.DATABASE_USERNAME);
              const db_password_message = Buffer.from(process.env.DATABASE_PASSWORD);
              const db_url_message = Buffer.from(process.env.DATABASE_URL);
              const server_host_message = Buffer.from(process.env.SERVER_HOST);

              const ciphertext_db_username = Buffer.alloc(db_username_message.length + sodium.crypto_box_SEALBYTES);
              const ciphertext_db_password = Buffer.alloc(db_password_message.length + sodium.crypto_box_SEALBYTES);
              const ciphertext_db_url = Buffer.alloc(db_url_message.length + sodium.crypto_box_SEALBYTES);
              const ciphertext_server_host = Buffer.alloc(server_host_message.length + sodium.crypto_box_SEALBYTES);

              sodium.crypto_box_seal(ciphertext_db_username, db_username_message, key);
              const encrypted_token_db_username = ciphertext_db_username.toString('base64');
              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: 'DATABASE_USERNAME',
                encrypted_value: encrypted_token_db_username,
                key_id: keyId,
              });

              sodium.crypto_box_seal(ciphertext_db_password, db_password_message, key);
              const encrypted_token_db_password = ciphertext_db_password.toString('base64');
              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: 'DATABASE_PASSWORD',
                encrypted_value: encrypted_token_db_password,
                key_id: keyId,
              });

              sodium.crypto_box_seal(ciphertext_db_url, db_url_message, key);
              const encrypted_token_db_url = ciphertext_db_url.toString('base64');
              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: 'DATABASE_URL',
                encrypted_value: encrypted_token_db_url,
                key_id: keyId,
              });

              sodium.crypto_box_seal(ciphertext_server_host, server_host_message, key);
              const encrypted_token_server_host = ciphertext_server_host.toString('base64');
              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: 'SERVER_HOST',
                encrypted_value: encrypted_token_server_host,
                key_id: keyId,
              });
            } else {
              core.error('Failed to fetch the public key. Unable to update secret');
            }
          

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: risandor/quotes_generator:0.1.0

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          fingerprint: ${{ secrets.FINGERPRINT }}
          port: 22
          script: |
            CI=true echo DATABASE_URL=${{ secrets.DATABASE_URL }} > .env
            CI=true echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
            CI=true echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
            CI=true docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            CI=true docker stop quotes-generator
            CI=true docker image prune -a
            CI=true docker pull risandor/quotes_generator:0.1.0
            CI=true docker rm quotes-generator
            CI=true docker run --name=quotes-generator --env-file .env -d -p 80:8000 risandor/quotes_generator:0.1.0
            
